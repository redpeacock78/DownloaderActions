name: DownloaderAction
on:
  repository_dispatch:
    types:
      - downloaderaction-ipfs

jobs:
  run:
    runs-on: ubuntu-latest
    name: Run
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
      - name: Create directory
        shell: bash
        run: mkdir -p download
      - name: Masking Secrets
        shell: bash
        run: |
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.link < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.channel < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.message < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          cat secrets.txt && \
          rm -rf secrets.txt
      - name: Setup Library
        shell: bash
        run: |
          is_nkf=$(type nkf > /dev/null 2>&1 && : || echo -n nkf)
          is_rar=$(type rar > /dev/null 2>&1 && : || echo -n rar)
          is_unar=$(type unar > /dev/null 2>&1 && : || echo -n unar)
          if [[ ${is_nkf} == "" ]] && [[ ${is_rar} == "" ]] && [[ ${is_unar} == "" ]]; then
            :
          else
            sudo apt-get install -y ${is_nkf} ${is_rar} ${is_unar}
          fi
          npm i -g npm@7 --registry=https://registry.npmjs.org && \
          type sharp > /dev/null 2>&1 || npm i -g sharp-cli
      - name: Setup ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
      - name: Make dht.dat
        if: ${{ success() }}
        id: make_dht
        shell: bash
        run: |
          hex=""
          hex+="a1 a2"
          hex+="02"
          hex+="00 00 00"
          hex+="00 03"
          hex+=$(printf "%016x\n" $(date --utc +%s))
          hex+="00 00 00 00 00 00 00 00"
          hex+=$(dd if=/dev/random bs=1 count=40 status=none | sha1sum - | cut -c1-40)
          hex+="00 00 00 00"
          hex+="00 00 00 00"
          hex+="00 00 00 00"
          echo ${hex} | xxd -r -p > dht.dat && \
          echo "dht_path=$(pwd)" >> "$GITHUB_OUTPUT"
      - name: Start Tor Proxy
        shell: bash
        run: |
          docker run -it -d \
            -p 8118:8118 \
            -p 9050:9050 \
            --name tor-proxy \
            dperson/torproxy:latest && \
          sleep 20
      - name: Confirmation of link survival
        id: link_status
        shell: bash
        run: |
          if [[ ${{ toJSON(github.event.client_payload.link) }} =~ ^http.*$ ]]; then
            retry=0
            flag=false
            status=""
            until "${flag}" || (( "${retry}" == 1000 )); do
              echo "Retry count: ${retry}"
              echo "Flag status: ${flag}"
              status="$(curl -siL --head -m 18000 --retry 100 --retry-all-errors -x http://localhost:8118 ${{ toJSON(github.event.client_payload.link) }} -o /dev/null -w '%{http_code}\n';:)"
              if [[ "${status}" == "200" || "${status}" == "302" || "${status}" == "307" ]]; then
                flag=true
              else
                ((retry++)) || true
                sleep 1
              fi
            done
            if [[ "${status}" != "200" && "${status}" != "302" && "${status}" != "307" ]]; then
              status="notfound" && \
              echo "status=${status}" >> "${GITHUB_OUTPUT}" && \
              exit 2
            fi
          fi
      - name: Start Downloader Action
        if: ${{ success() }}
        timeout-minutes: 300
        shell: bash
        run: |
          port=$(echo {6881..6999} | tr ' ' \\n | shuf -n1) && \
          dht_path=${{ steps.make_dht.outputs.dht_path }} && \
          cd download && \
          docker run --rm -i \
            -p ${port}:${port} \
            -p ${port}:${port}/udp \
            -v $(pwd):/download \
            -v ${dht_path}:/root/.cache/aria2 \
            --link tor-proxy:tor \
            redpeacock78/downloaderaction:latest \
            -s20 -j20 -x16 -k20M \
            --all-proxy="http://tor:8118" \
            --listen-port=${port} \
            --dht-listen-port=${port} \
            --disable-ipv6=true \
            --continue=true \
            --seed-time=0 \
            --max-tries=0 \
            --retry-wait=10 \
            --summary-interval=0 \
            --download-result=hide \
            --console-log-level=error \
            ${{ toJSON(github.event.client_payload.link) }} 2>/dev/null
      - name: Adjust file name
        if: ${{ success() }}
        shell: bash
        run: |
          cd download && \
          file="$(ls)" && \
          new_name="$(echo "${file}" | nkf -w --url-input)" && \
          if [[ "${file}" != "${new_name}" ]]; then
            mv "${file}" "${new_name}"
          fi
      - name: Adjust Audio/Video file size
        if: ${{ success() }}
        shell: bash
        run: |
          dir=$(pwd) && \
          cd download && \
          file="$(ls)" && \
          if [[ "$(file --mime-type "${file}" | awk -F ": " '{sub(/^ /,"",$2);print $2}')" =~ "video/" ]]; then
            if (( "$(wc -c < "${file}")" <= 62914560 )); then
              :
            else
              mkdir -p "${dir}/conv" && \
              ffmpeg -i "${file}" -fs 60MB -loglevel error "${dir}/conv/${file%.*}.webm"
            fi
          elif [[ "$(file --mime-type "${file}" | awk -F ": " '{sub(/^ /,"",$2);print $2}')" =~ "audio/" ]]; then
            if (( "$(wc -c < "${file}")" <= 62914560 )); then
              :
            else
              mkdir -p "${dir}/conv" && \
              ffmpeg -i "${file}" -fs 60MB -loglevel error "${dir}/conv/${file%.*}.${file##*.}"
            fi
          fi
      - name: Resize Archive
        if: ${{ success() }}
        timeout-minutes: 300
        shell: bash
        run: |
          cd download && \
          file="$(ls)" && \
          if (( "$(wc -c < "${file}")" <= 26214400 )); then
            :
          else
            type=$(file --mime-type "${file}" | awk -F ": " '{sub(/^ /,"",$2);print $2}')
            if [[ "${type}" =~ "/zip" ]] || [[ "${type}" =~ "/x-7z-compressed" ]] || [[ "${type}" =~ "/x-rar" ]]; then
              unar -q "${file}" && \
              mv "${file%.*}/" "./${file%.*}_origin/" && \
              mkdir "${file%.*}" && \
              flag="0" && \
              dir_name="$(pwd)/${file%.*}" && \
              cd "${file%.*}_origin" && \
              IFS=$'\n' && \
              for file_name in $(ls); do
                if [[ "$(file --mime-type "${file_name}" | awk -F : '{sub(/^ /,"",$2);print $2}')" =~ "image/" ]]; then
                  :
                else
                  flag="1"
                fi
              done
              if [[ "${flag}" == "0" ]]; then
                IFS=$'\n' && \
                for file_name in $(ls); do
                  if [[ "$(file --mime-type "${file_name}" | awk -F ": " '{sub(/^ /,"",$2);print $2}')" =~ "image/" ]]; then
                    sharp -i "${file_name}" -f avif -q 17 -o "${dir_name}/" > /dev/null 2>&1
                  else
                    cp "${file_name}" "${dir_name}/${file_name}"
                  fi
                done
                cd .. && \
                rm -rf "${file}" && \
                rm -rf "${file%.*}_origin/" && \
                rar a -em5 -idq "${file%.*}.rar" "${file%.*}/*" && \
                rm -rf "${file%.*}/"
              else
                cd .. && \
                rm -rf "${file%.*}_origin/" && \
                rm -rf "${file%.*}/"
              fi
            fi
          fi
      - name: Upload files to ipfs
        if: ${{ success() }}
        id: anonfiles
        shell: bash
        run: |
          dir=$(pwd) && \
          cd download && \
          file="$(ls)" && \
          retry=0
          flag=false
          name=""
          hash=""
          size=""
          until "${flag}" || (( "${retry}" == 1000 )); do
            echo "Retry count: ${retry}"
            echo "Flag status: ${flag}"
            if [[ "$(file --mime-type "${file}" | awk -F ": " '{sub(/^ /,"",$2);print $2}')" =~ "video/" ]]; then
              if (( "$(wc -c < "${file}")" <= 62914560 )); then
                json="$(curl -s -x http://localhost:8118 -X POST -F file=@"${file}" ${{ secrets.IPFS_API }})"
              else
                json="$(curl -s -x http://localhost:8118 -X POST -F file=@"${dir}/conv/${file%.*}.webm" ${{ secrets.IPFS_API }})"
              fi
            elif [[ "$(file --mime-type "${file}" | awk -F ": " '{sub(/^ /,"",$2);print $2}')" =~ "audio/" ]]; then
              if (( "$(wc -c < "${file}")" <= 62914560 )); then
                json="$(curl -s -x http://localhost:8118 -X POST -F file=@"${file}" ${{ secrets.IPFS_API }})"
              else
                json="$(curl -s -x http://localhost:8118 -X POST -F file=@"${dir}/conv/${file%.*}.${file##*.}" ${{ secrets.IPFS_API }})"
              fi
            elif [[ "${type}" =~ "/zip" ]] || [[ "${type}" =~ "/x-7z-compressed" ]] || [[ "${type}" =~ "/x-rar" ]]; then
              json="$(curl -s -x http://localhost:8118 -X POST -F file=@"${file}" ${{ secrets.IPFS_API }})"
            else
              json="$(curl -s -x http://localhost:8118 -X POST -F file=@"${file}" ${{ secrets.IPFS_API }})"
            fi && \
            name="$(jq -r .Name <<<"${json}")"
            hash="$(jq -r .Hash <<<"${json}")"
            size="$(jq -r .Size <<<"${json}")"
            if [[ "${name}" != "" && "${hash}" != "" && "${size}" != "" ]] || \
              [[ "${name}" != "null" && "${hash}" != "null" && "${size}" != "null" ]]; then
              flag=true
            else
              ((retry++)) || true
              sleep 1
            fi
          done && \
          echo "::add-mask::${hash}" && \
          echo "::add-mask::${name}" && \
          echo "::add-mask::${size}" && \
          echo "hash=${hash}" >> "${GITHUB_OUTPUT}" && \
          echo "name=${name}" >> "${GITHUB_OUTPUT}" && \
          echo "size=${size}" >> "${GITHUB_OUTPUT}"
      - name: Check Content
        if: ${{ success() }}
        shell: bash
        run: |
          retry=0
          flag=false
          tmp="$(mktemp)"
          until "${flag}" || (( "${retry}" == 1000 )); do
            echo "Retry count: ${retry}"
            echo "Flag status: ${flag}"
            curl -sL \
              --head \
              -m 18000 \
              --retry 100 \
              --retry-all-errors \
              --output /dev/null \
              -w '%{http_code}\n' \
              "${{ secrets.IPFS_GATEWAY }}${{ steps.anonfiles.outputs.hash }}?filename=$(node -e "console.log(encodeURIComponent('${{ steps.anonfiles.outputs.name }}'))")" > "${tmp}" && \
            if [[ "$(cat "${tmp}")" == "200" ]]; then
              flag=true
            else
              ((retry++)) || true
              sleep 1
            fi
          done
          rm -rf "${tmp}"
      - name: All succeeded
        if: ${{ success() }}
        shell: bash
        run: |
          dir=$(pwd) && \
          cd download && \
          file="$(ls)" && \
          if (( "$(wc -c < "${file}")" <= 62914560 )); then
            type="$(file --mime-type "${{ steps.anonfiles.outputs.name }}" | awk -F : '{sub(/^ /,"",$2);print $2}')" 
          else
            type="$(file --mime-type "${dir}/conv/${{ steps.anonfiles.outputs.name }}" | awk -F : '{sub(/^ /,"",$2);print $2}')" 
          fi && \
          link="${{ secrets.IPFS_GATEWAY }}${{ steps.anonfiles.outputs.hash }}?filename=$(node -e "console.log(encodeURIComponent('${{ steps.anonfiles.outputs.name }}'))")" && \
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "success",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "title": "${{ steps.anonfiles.outputs.name }}",
            "size": "${{ steps.anonfiles.outputs.size }}",
            "type": "${type}",
            "link": "${link}",
            "origin_link": ${{ toJSON(github.event.client_payload.link) }}
          }
          EOF
      - name: Download file not found
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status != ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! This link has expired."
          }
          EOF
      - name: Download timed out
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! Processing time exceeded 5 hours and timed out."
          }
          EOF
