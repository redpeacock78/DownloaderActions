name: DownloaderAction
on:
  repository_dispatch:
    types:
      - downloaderaction-ipfs

jobs:
  run:
    runs-on: ubuntu-latest
    name: Run
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'
      - name: Create directory
        shell: bash
        run: mkdir -p download
      - name: Masking Secrets
        shell: bash
        run: |
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.link < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.channel < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.message < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          cat secrets.txt && \
          rm -rf secrets.txt
      - name: Confirmation of link survival
        id: link_status
        shell: bash
        run: |
          if [[ ${{ toJSON(github.event.client_payload.link) }} =~ ^http.*$ && ! ${{ toJSON(github.event.client_payload.link) }} =~ \.onion ]]; then
            status="$(curl -siL ${{ toJSON(github.event.client_payload.link) }} -o /dev/null -w '%{http_code}\n')"
            if [[ "${status}" != "200" ]]; then
              status="notfound" && \
              echo "::set-output name=status::${status}" && \
              exit 2
            fi
          fi
      - name: Start Docker
        if: ${{ success() }}
        timeout-minutes: 300
        shell: bash
        run: |
          cd download && \
          if [[ ${{ toJSON(github.event.client_payload.link) }} =~ \.onion ]]; then
            docker run -it -d \
              -p 8118:8118 \
              -p 9050:9050 \
              --name tor-proxy \
              dperson/torproxy:latest
            sleep 20 && \
            docker run --rm -i \
              -p 6988:6988 \
              -p 6982:6982/udp \
              -v $(pwd):/download \
              --link tor-proxy:tor \
              redpeacock78/downloaderaction:latest \
              -s20 -j20 -x16 -k20M \
              --http-proxy="http://tor:8118" \
              --seed-time=0 \
              --max-tries=0 \
              --retry-wait=10 \
              --summary-interval=0 \
              --download-result=hide \
              --console-log-level=error \
              ${{ toJSON(github.event.client_payload.link) }}
          else
            docker run --rm -i \
              -p 6988:6988 \
              -p 6982:6982/udp \
              -v $(pwd):/download \
              redpeacock78/downloaderaction:latest \
              -s20 -j20 -x16 -k20M \
              --seed-time=0 \
              --max-tries=0 \
              --retry-wait=10 \
              --summary-interval=0 \
              --download-result=hide \
              --console-log-level=error \
              ${{ toJSON(github.event.client_payload.link) }}
          fi
      - name: Upload files to ipfs
        if: ${{ success() }}
        id: anonfiles
        shell: bash
        run: |
          cd download
          if [[ ${{ toJSON(github.event.client_payload.link) }} =~ \.onion ]]; then
            json="$(curl -s -x http://localhost:8118 -X POST -F file=@"$(ls)" https://demo.storj-ipfs.com/api/v0/add)"
          else
            json="$(curl -s -X POST -F file=@"$(ls)" https://demo.storj-ipfs.com/api/v0/add)"
          fi
          name="$(jq -r .Name <<<"${json}")" && \
          hash="$(jq -r .Hash <<<"${json}")" && \
          size="$(jq -r .Size <<<"${json}")"
          echo "::add-mask::${hash}" && \
          echo "::add-mask::${name}" && \
          echo "::add-mask::${size}" && \
          echo "::set-output name=hash::${hash}" && \
          echo "::set-output name=name::${name}" && \
          echo "::set-output name=size::${size}"
      - name: All succeeded
        if: ${{ success() }}
        shell: bash
        run: |
          cd download && \
          type="$(file "${{ steps.anonfiles.outputs.name }}"|awk -F : '{sub(/^ /,"",$2);print $2}')" && \
          link="$(node -e "console.log(encodeURI('https://ipfs.io/ipfs/${{ steps.anonfiles.outputs.hash }}'))")" && \
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "success",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "title": "${{ steps.anonfiles.outputs.name }}",
            "size": "${{ steps.anonfiles.outputs.size }}",
            "type": "${type}",
            "link": "${link}",
            "origin_link": ${{ toJSON(github.event.client_payload.link) }}
          }
          EOF
      - name: Download file not found
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status != ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! This link has expired."
          }
          EOF
      - name: Download timed out
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! Processing time exceeded 5 hours and timed out."
          }
          EOF
