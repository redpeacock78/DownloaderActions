name: DownloaderAction
on:
  repository_dispatch:
    types:
      - downloaderaction-media

jobs:
  run:
    runs-on: ubuntu-latest
    name: Run
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14"
      - name: Create directory
        shell: bash
        run: mkdir -p download
      - name: Masking Secrets
        shell: bash
        run: |
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.link < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.channel < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.message < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          cat secrets.txt && \
          rm -rf secrets.txt
      - name: Start Tor Proxy
        shell: bash
        run: |
          domain="$(echo ${{ toJSON(github.event.client_payload.link) }} | sed -E 's/^.*(http|https):\/\/([^/]+).*/\2/g')"
          if [[ "${domain}" =~ ^.*".onion"$ ]]; then
            docker run -it -d \
              -p 8118:8118 \
              -p 9050:9050 \
              --name tor-proxy \
              dperson/torproxy:latest && \
            sleep 20
          fi
      - name: Confirmation of link survival
        id: link_status
        shell: bash
        run: |
          if [[ ${{ toJSON(github.event.client_payload.link) }} =~ ^http.*$ ]]; then
            domain="$(echo ${{ toJSON(github.event.client_payload.link) }} | sed -E 's/^.*(http|https):\/\/([^/]+).*/\2/g')"
            if [[ "${domain}" =~ ^.*".onion"$ ]]; then
              proxy="$(echo -n " -x http://localhost:8118 ")"
            fi
            status="$(curl -siL --head ${proxy} ${{ toJSON(github.event.client_payload.link) }} -o /dev/null -w '%{http_code}\n';:)"
            if [[ "${status}" != "200" && "${status}" != "302" ]]; then
              status="notfound" && \
              echo "status=${status}" >> "$GITHUB_OUTPUT" && \
              exit 2
            fi
          fi
      - name: Setup ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
        if: ${{ success() }}
      - name: Install yt-dlp
        if: ${{ success() }}
        shell: bash
        run: |
          sudo curl -sL https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp
          sudo chmod a+rx /usr/local/bin/yt-dlp
      - name: Make dht.dat
        if: ${{ success() }}
        id: make_dht
        shell: bash
        run: |
          domain="$(echo ${{ toJSON(github.event.client_payload.link) }} | sed -E 's/^.*(http|https):\/\/([^/]+).*/\2/g')"
          if [[ "${domain}" =~ ^.*".onion"$ ]]; then
            hex=""
            hex+="a1 a2"
            hex+="02"
            hex+="00 00 00"
            hex+="00 03"
            hex+=$(printf "%016x\n" $(date --utc +%s))
            hex+="00 00 00 00 00 00 00 00"
            hex+=$(dd if=/dev/random bs=1 count=40 status=none | sha1sum - | cut -c1-40)
            hex+="00 00 00 00"
            hex+="00 00 00 00"
            hex+="00 00 00 00"
            echo ${hex} | xxd -r -p > dht.dat && \
            echo "dht_path=$(pwd)" >> "$GITHUB_OUTPUT"
          fi
      - name: Start Download
        if: ${{ success() }}
        timeout-minutes: 300
        shell: bash
        run: |
          domain="$(echo ${{ toJSON(github.event.client_payload.link) }} | sed -E 's/^.*(http|https):\/\/([^/]+).*/\2/g')"
          if [[ "${domain}" =~ ^.*".onion"$ ]]; then
            port=$(echo {6881..6999} | tr ' ' \\n | shuf -n1) && \
            dht_path=${{ steps.make_dht.outputs.dht_path }} && \
            cd download && \
            docker run --rm -i \
              -p ${port}:${port} \
              -p ${port}:${port}/udp \
              -v $(pwd):/download \
              -v ${dht_path}:/root/.cache/aria2 \
              --link tor-proxy:tor \
              redpeacock78/downloaderaction:latest \
              -s20 -j20 -x16 -k20M \
              --all-proxy="http://tor:8118" \
              --listen-port=${port} \
              --dht-listen-port=${port} \
              --disable-ipv6=true \
              --continue=true \
              --seed-time=0 \
              --max-tries=0 \
              --retry-wait=10 \
              --summary-interval=0 \
              --download-result=hide \
              --console-log-level=error \
              ${{ toJSON(github.event.client_payload.link) }}
          else
            cookie_path=$(pwd) && \
            echo "${{ secrets.TWITTER_COOKIES }}" >> cookie.txt && \
            cd download && \
            yt-dlp -q --cookies ${cookie_path}/cookie.txt \
              -o "%(id)s_%(autonumber)s.%(ext)s" \
              ${{ toJSON(github.event.client_payload.link) }}
          fi
      - name: Check and Convert Files
        if: ${{ success() }}
        shell: bash
        run: |
          dir=$(pwd) && \
          cd download && \
          IFS=$'\n' && \
          for file_name in $(ls); do
            if (( "$(wc -c < "${file_name}")" <= 26214400 )); then
              :
            else
              mkdir -p "${dir}/conv" && \
              ffmpeg -i "${file_name}" -vcodec libx265 -tag:v hvc1 -fs 25MB "${dir}/conv/${file_name}"
            fi
          done
      - name: Upload files
        if: ${{ success() }}
        id: upload
        shell: bash
        run: |
          dir=$(pwd) && \
          cd download && \
          IFS=$'\n' && \
          for file_name in $(ls); do
            if (( "$(wc -c < "${file_name}")" <= 26214400 )); then
              post_urls=("${{ secrets.C1_URL }}" "${{ secrets.C2_URL }}" "${{ secrets.C3_URL }}")
              post_url="${post_urls[$(($RANDOM % ${#post_urls[*]}))]}"
              json="$(curl -s -X POST -H 'Content-Type: multipart/form-data' -F "file=@${file_name}" "${post_url}")" && \
              link="$(jq -r .attachments[0].url <<<"${json}")" && \
              curl -s -X POST \
                ${{ secrets.ENDPOINT_URL }} \
                -H "Accept: application/json" \
                -H "Content-type: application/json" \
                -d @- <<EOF
          {
            "status": "media",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": "${link}"
          }
          EOF
            else
              post_urls=("${{ secrets.C1_URL }}" "${{ secrets.C2_URL }}" "${{ secrets.C3_URL }}")
              post_url="${post_urls[$(($RANDOM % ${#post_urls[*]}))]}"
              json="$(curl -s -X POST -H 'Content-Type: multipart/form-data' -F "file=@${dir}/conv/${file_name}" "${post_url}")" && \
              link="$(jq -r .attachments[0].url <<<"${json}")" && \
              curl -s -X POST \
                ${{ secrets.ENDPOINT_URL }} \
                -H "Accept: application/json" \
                -H "Content-type: application/json" \
                -d @- <<EOF
          {
            "status": "media",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": "${link}"
          }
          EOF
            fi
            sleep 5
          done
      - name: Download file not found
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status != ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! This link has expired."
          }
          EOF
      - name: Download timed out
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! Processing time exceeded 5 hours and timed out."
          }
          EOF
