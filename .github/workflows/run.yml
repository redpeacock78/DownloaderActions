name: DownloaderAction
on:
  repository_dispatch:
    types:
      - downloaderaction

jobs:
  run:
    runs-on: ubuntu-latest
    name: Run
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "14"
      - name: Create directory
        shell: bash
        run: mkdir -p download
      - name: Setup ffmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
      - name: Setup nkf
        run: |
          type nkf > /dev/null 2>&1 || sudo apt-get install -y nkf
      - name: Setup webp
        run: |
          type cwebp > /dev/null 2>&1 || sudo apt-get install -y webp
      - name: Masking Secrets
        shell: bash
        run: |
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.link < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.channel < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r .client_payload.message < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          cat secrets.txt && \
          rm -rf secrets.txt
      - name: Start Tor Proxy
        shell: bash
        run: |
          docker run -it -d \
            -p 8118:8118 \
            -p 9050:9050 \
            --name tor-proxy \
            dperson/torproxy:latest && \
          sleep 20
      - name: Confirmation of link survival
        id: link_status
        shell: bash
        run: |
          if [[ ${{ toJSON(github.event.client_payload.link) }} =~ ^http.*$ ]]; then
            status="$(curl -siL -m 18000 -x http://localhost:8118 ${{ toJSON(github.event.client_payload.link) }} -o /dev/null -w '%{http_code}\n';:)"
            if [[ "${status}" != "200" && "${status}" != "302" && "${status}" != "307" ]]; then
              status="notfound" && \
              echo "status=${status}" >> "$GITHUB_OUTPUT" && \
              exit 2
            fi
          fi
      - name: Make dht.dat
        if: ${{ success() }}
        id: make_dht
        shell: bash
        run: |
          hex=""
          hex+="a1 a2"
          hex+="02"
          hex+="00 00 00"
          hex+="00 03"
          hex+=$(printf "%016x\n" $(date --utc +%s))
          hex+="00 00 00 00 00 00 00 00"
          hex+=$(dd if=/dev/random bs=1 count=40 status=none | sha1sum - | cut -c1-40)
          hex+="00 00 00 00"
          hex+="00 00 00 00"
          hex+="00 00 00 00"
          echo ${hex} | xxd -r -p > dht.dat && \
          echo "dht_path=$(pwd)" >> "$GITHUB_OUTPUT"
      - name: Datermine the port numer to use
        if: ${{ success() }}
        id: use_port
        shell: bash
        run: |
          echo "number=$(echo {1024..65535} | tr ' ' \\n | sed '/^8118$/d;/^9050$/d' | shuf -n1)" >> "$GITHUB_OUTPUT"
      - name: Start Docker
        if: ${{ success() }}
        timeout-minutes: 300
        shell: bash
        run: |
          cd download && \
          port=${{ steps.use_port.outputs.number }} && \
          dht_path=${{ steps.make_dht.outputs.dht_path }} && \
          docker run --rm -i \
            -p ${port}:${port} \
            -p ${port}:${port}/udp \
            -v $(pwd):/download \
            -v ${dht_path}:/root/.cache/aria2 \
            --link tor-proxy:tor \
            redpeacock78/downloaderaction:latest \
            -s20 -j20 -x16 -k20M \
            --all-proxy="http://tor:8118" \
            --listen-port=${port} \
            --dht-listen-port=${port} \
            --disable-ipv6=true \
            --continue=true \
            --seed-time=0 \
            --max-tries=0 \
            --retry-wait=10 \
            --summary-interval=0 \
            --download-result=hide \
            --console-log-level=error \
            ${{ toJSON(github.event.client_payload.link) }}
      - name: Adjust file name
        if: ${{ success() }}
        run: |
          cd download && \
          file="$(ls)" && \
          new_name="$(echo "${file}" | nkf -w --url-input)" && \
          if [[ "${file}" != "${new_name}" ]]; then
            mv "${file}" "${new_name}"
          fi
      - name: Adjust Audio/Video file size
        if: ${{ success() }}
        run: |
          cd download && \
          file="$(ls)" && \
          if [[ "$(file --mime-type "${file}" | awk -F : '{sub(/^ /,"",$2);print $2}')" =~ "video/" ]]; then
            if (( "$(wc -c < "${file}")" <= 26214400 )); then
              :
            else
              ffmpeg -i "${file}" -fs 25MB -loglevel error "${file%.*}_cps.webm" && \
              rm -rf "${file}"
            fi
          fi
      - name: Resize Archive
        if: ${{ success() }}
        run: |
          cd download && \
          file="$(ls)" && \
          if (( "$(wc -c < "${file}")" <= 26214400 )); then
            unzip -d "${file%.*}_origin" "${file}" && \
            mkdir "${file%.*}" && \
            dir_name="$(pwd)/${file%.*}" && \
            cd "${file%.*}_origin" && \
            IFS=$'\n' && \
            for file_name in $(ls); do
              if [[ "$(file --mime-type "${file_name}" | awk -F : '{sub(/^ /,"",$2);print $2}')" =~ "image/" ]]; then
                cwebp "${file_name}" -o "${dir_name}/${file_name%.*}.webp"
              else
                cp "${file_name}" "${dir_name}/${file_name}"
              fi
            done
            rm -rf "${file%.*}_origin" && \
            rm -rf "${file}" && \
            zip -r "${file%.*}" "${file}"
          fi
      - name: Upload files to anonfiles
        if: ${{ success() }}
        id: anonfiles
        shell: bash
        run: |
          cd download && \
          file="$(ls)"
          if (( "$(wc -c < "${file}")" <= 26214400 )); then
            post_urls=("${{ secrets.C1_URL }}" "${{ secrets.C2_URL }}" "${{ secrets.C3_URL }}")
            post_url="${post_urls[$(($RANDOM % ${#post_urls[*]}))]}"
            json="$(curl -s -x http://localhost:8118 -X POST -H 'Content-Type: multipart/form-data' -F "file=@${file}" "${post_url}")" && \
            id="$(jq -r .attachments[0].url <<<"${json}")" && \
            name="$(jq -r .attachments[0].filename <<<"${json}")" && \
            size="$(jq -r .attachments[0].size <<<"${json}")"
          else
            json="$(curl -s -x http://localhost:8118 -F "file=@${file}" https://anonfile.com/api/v1/upload)" && \
            id="$(jq -r .data.file.metadata.id <<<"${json}")" && \
            name="$(jq -r .data.file.metadata.name <<<"${json}")" && \
            size="$(jq -r .data.file.metadata.size.readable <<<"${json}")"
          fi
          echo "::add-mask::${id}" && \
          echo "::add-mask::${name}" && \
          echo "::add-mask::${size}" && \
          echo "id=${id}" >> "$GITHUB_OUTPUT" && \
          echo "name=${name}" >> "$GITHUB_OUTPUT" && \
          echo "size=${size}" >> "$GITHUB_OUTPUT"
      - name: All succeeded
        if: ${{ success() }}
        shell: bash
        run: |
          cd download && \
          file="$(ls)"
          if (( "$(wc -c < "${file}")" <= 26214400 )); then
            name="${file}"
            type="$(file --mime-type "${file}" | awk -F : '{sub(/^ /,"",$2);print $2}')"
            cdn_id="$(awk -F '/' '{print $5}' <<<"${{ steps.anonfiles.outputs.id }}")"
            id="$(awk -F '/' '{print $6}' <<<"${{ steps.anonfiles.outputs.id }}")"
            default_name="$(awk -F '/' '{print $7}' <<<"${{ steps.anonfiles.outputs.id }}")"
            file_name="$(node -e "console.log(encodeURIComponent('${name//\'/'\'\'}'))")"
            if [[  "${type}" =~ "video/" ]]; then
              proxy_link="${{ secrets.PROXY_URL }}${cdn_id}/${id}/${default_name}"
            else
              proxy_link="${{ secrets.PROXY_URL }}${cdn_id}/${id}/${default_name}&file=${file_name}"
            fi
            short_link="$(curl -s -X POST ${{ secrets.SHORTER_API }}/api/v0/shorter -d "{\"url\": \"${proxy_link}\"}" | jq -r .key)"
            link="${{ secrets.SHORTER_API }}/${short_link}"
          else
            name="${{ steps.anonfiles.outputs.name }}"
            file_name="${name}"
            type="$(file --mime-type "${{ steps.anonfiles.outputs.name }}" | awk -F : '{sub(/^ /,"",$2);print $2}')"
            link="https://anonfiles-api.vercel.app/$(node -e "console.log(encodeURIComponent('${{ steps.anonfiles.outputs.id }}'))")/$(node -e "console.log(encodeURIComponent('${file_name//\'/'\'\'}'))")"
          fi
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "success",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "title": "${name}",
            "size": "${{ steps.anonfiles.outputs.size }}",
            "type": "${type}",
            "link": "${link}",
            "origin_link": ${{ toJSON(github.event.client_payload.link) }}
          }
          EOF
      - name: Download file not found
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status != ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! This link has expired."
          }
          EOF
      - name: Download timed out
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -d @- <<EOF
          {
            "status": "failure",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! Processing time exceeded 5 hours and timed out."
          }
          EOF
