name: DownloaderAction
on:
  repository_dispatch:
    types:
      - downloaderaction

jobs:
  run:
    runs-on: ubuntu-22.04 # ubuntu-latest
    name: Run
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"
      - name: Create directory
        shell: bash
        run: mkdir -p download
      # - name: Setup ffmpeg
      #   uses: FedericoCarboni/setup-ffmpeg@v3
      - name: Setup Library
        shell: bash
        run: |
          is_nkf=$(type nkf > /dev/null 2>&1 && : || echo -n nkf)
          is_rar=$(type rar > /dev/null 2>&1 && : || echo -n rar)
          is_unar=$(type unar > /dev/null 2>&1 && : || echo -n unar)
          is_ffmpeg=$(type ffmpeg > /dev/null 2>&1 && : || echo -n ffmpeg)
          if [[ ${is_nkf} == "" ]] && [[ ${is_rar} == "" ]] && [[ ${is_unar} == "" ]] && [[ ${is_ffmpeg} == "" ]]; then
            :
          else
            sudo apt-get update && \
            sudo apt-get install -y ${is_nkf} ${is_rar} ${is_unar} ${is_ffmpeg}
          fi
          npm i -g npm@7 --registry=https://registry.npmjs.org && \
          type sharp > /dev/null 2>&1 || npm i -g sharp-cli@4.2.0
      - name: Masking Secrets
        shell: bash
        run: |
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r '.client_payload.link' < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r '.client_payload.channel' < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          echo -n '::add-mask::' >> secrets.txt && \
          jq -r '.client_payload.message' < "${GITHUB_EVENT_PATH}" >> secrets.txt && \
          cat secrets.txt && \
          rm -rf secrets.txt
      - name: Start Tor Proxy
        shell: bash
        run: |
          docker run -it -d \
            -p 8118:8118 \
            -p 9050:9050 \
            --name tor-proxy \
            dperson/torproxy:latest && \
          sleep 20
      - name: Confirmation of link survival
        id: link_status
        shell: bash
        run: |
          if [[ ${{ toJSON(github.event.client_payload.link) }} =~ ^http.*$ ]]; then
            retry=0
            flag=false
            status=""
            until "${flag}" || (( "${retry}" == 1000 )); do
              echo "Retry count: ${retry}"
              echo "Flag status: ${flag}"
              status="$(curl -siL --head -m 18000 --retry 100 --retry-all-errors -x http://localhost:8118 ${{ toJSON(github.event.client_payload.link) }} -o /dev/null -w '%{http_code}\n';:)"
              if [[ "${status}" == "200" || "${status}" == "302" || "${status}" == "307" ]]; then
                flag=true
              else
                ((retry++)) || :
                sleep 1
              fi
            done
            if [[ "${status}" != "200" && "${status}" != "302" && "${status}" != "307" ]]; then
              status="notfound" && \
              echo "status=${status}" >> "${GITHUB_OUTPUT}" && \
              exit 2
            fi
          fi
      - name: Make dht.dat
        if: ${{ success() }}
        id: make_dht
        shell: bash
        run: |
          hex=""
          hex+="a1 a2"
          hex+="02"
          hex+="00 00 00"
          hex+="00 03"
          hex+=$(printf "%016x\n" $(date --utc +%s))
          hex+="00 00 00 00 00 00 00 00"
          hex+=$(dd if=/dev/random bs=1 count=40 status=none | sha1sum - | cut -c1-40)
          hex+="00 00 00 00"
          hex+="00 00 00 00"
          hex+="00 00 00 00"
          echo ${hex} | xxd -r -p > dht.dat && \
          echo "dht_path=$(pwd)" >> "$GITHUB_OUTPUT"
      - name: Datermine the port numer to use
        if: ${{ success() }}
        id: use_port
        shell: bash
        run: |
          echo "number=$(echo {1024..65535} | tr ' ' \\n | sed '/^8118$/d;/^9050$/d' | shuf -n1)" >> "$GITHUB_OUTPUT"
      - name: Start Docker
        if: ${{ success() }}
        timeout-minutes: 300
        shell: bash
        run: |
          cd download && \
          port=${{ steps.use_port.outputs.number }} && \
          dht_path=${{ steps.make_dht.outputs.dht_path }} && \
          docker run --rm -i \
            -p ${port}:${port} \
            -p ${port}:${port}/udp \
            -v $(pwd):/download \
            -v ${dht_path}:/root/.cache/aria2 \
            --link tor-proxy:tor \
            redpeacock78/downloaderaction:latest \
            -s20 -j20 -x16 -k20M \
            --all-proxy="http://tor:8118" \
            --listen-port=${port} \
            --dht-listen-port=${port} \
            --disable-ipv6=true \
            --continue=true \
            --seed-time=0 \
            --max-tries=0 \
            --retry-wait=10 \
            --summary-interval=0 \
            --download-result=hide \
            --console-log-level=error \
            ${{ toJSON(github.event.client_payload.link) }}
      - name: Adjust file name
        if: ${{ success() }}
        shell: bash
        run: |
          cd download && \
          file="$(ls)" && \
          new_name="$(echo "${file}" | nkf -w --url-input)" && \
          if [[ "${file}" != "${new_name}" ]]; then
            mv "${file}" "${new_name}"
          fi
      - name: Adjust Audio/Video file size
        if: ${{ success() }}
        timeout-minutes: 300
        shell: bash
        run: |
          cd download && \
          file="$(ls)" && \
          type="$(file --mime-type "${file}" | awk -F ": " '{sub(/^ /,"",$2);print $2}')" && \
          if [[ "${type}" =~ "video/" ]] || [[ "${type}" =~ "audio/" ]]; then
            if (( "$(wc -c < "${file}")" <= 104857600 )); then
              :
            else
              ffmpeg -i "${file}" -fs 100MB -loglevel error "${file%.*}_cps.${file##*.}" && \
              rm -rf "${file}" && \
              mv "${file%.*}_cps.${file##*.}" "${file%.*}.${file##*.}"
            fi
          fi
      - name: Resize Archive
        if: ${{ success() }}
        timeout-minutes: 300
        shell: bash
        run: |
          cd download && \
          file="$(ls)" && \
          if (( "$(wc -c < "${file}")" <= 9437184 )); then
            :
          else
            type=$(file --mime-type "${file}" | awk -F ": " '{sub(/^ /,"",$2);print $2}')
            if [[ "${type}" =~ "/zip" ]] || [[ "${type}" =~ "/x-7z-compressed" ]] || [[ "${type}" =~ "/x-rar" ]]; then
              unar -q "${file}" && \
              mv "${file%.*}/" "./${file%.*}_origin/" && \
              mkdir "${file%.*}" && \
              flag="0" && \
              dir_name="$(pwd)/${file%.*}" && \
              cd "${file%.*}_origin" && \
              IFS=$'\n' && \
              for file_name in $(ls); do
                if [[ "$(file --mime-type "${file_name}" | awk -F : '{sub(/^ /,"",$2);print $2}')" =~ "image/" ]]; then
                  :
                else
                  flag="1"
                fi
              done
              if [[ "${flag}" == "0" ]]; then
                IFS=$'\n' && \
                for file_name in $(ls); do
                  if [[ "$(file --mime-type "${file_name}" | awk -F ": " '{sub(/^ /,"",$2);print $2}')" =~ "image/" ]]; then
                    sharp -i "${file_name}" -f avif -q 17 --effort 6 -o "${dir_name}/" > /dev/null 2>&1
                  else
                    cp "${file_name}" "${dir_name}/${file_name}"
                  fi
                done
                cd .. && \
                rm -rf "${file}" && \
                rm -rf "${file%.*}_origin/" && \
                rar a -em5 -idq "${file%.*}.rar" "${file%.*}/*" && \
                rm -rf "${file%.*}/"
              else
                cd .. && \
                rm -rf "${file%.*}_origin/" && \
                rm -rf "${file%.*}/"
              fi
            fi
          fi
      - name: Upload files to anonfiles
        if: ${{ success() }}
        id: anonfiles
        shell: bash
        run: |
          cd download && \
          file="$(ls)"
          name="${file}"
          type="$(file --mime-type "${file}" | awk -F : '{sub(/^ /,"",$2);print $2}')"
          if (( "$(wc -c < "${file}")" <= 104857600 )); then
            json=""
            retry=0
            flag=false
            until "${flag}" || (( "${retry}" == 1000 )); do
              echo "Retry count: ${retry}"
              echo "Flag status: ${flag}"
              json="$(curl -s -m 300000 --retry 1000 --retry-all-errors -X POST "${{ secrets.PROXY_URL }}/upload" -F "file=@${file}")"
              # digit="$(jq -r -R 'fromjson? | .digit' <<< "${json}")"
              # encrypted="$(jq -r -R 'fromjson? | .encrypted' <<< "${json}")"
              if jq -e . <<< "${json}" >/dev/null 2>&1; then
                digit="$(jq -r '.digit // empty' <<< "${json}")"
                encrypted="$(jq -r '.encrypted // empty' <<< "${json}")"
                if [[ -n "${digit}" && -n "${encrypted}" ]]; then
                  flag=true
                else
                  ((retry++)) || true
                  sleep 1
                fi
              else
                ((retry++)) || true
                sleep 1
              fi
            done
            echo "::add-mask::${json}" && \
            echo "${json}" >> upload.json
          else
            size="$(echo $(ls -hl | grep -v 'upload.json' | tail -n1 | awk '{print $5}')B)" && \
            echo "::add-mask::${size}" && \
            echo "size=${size}" >> "$GITHUB_OUTPUT" && \
            echo "status=sizeover" >> "$GITHUB_OUTPUT" && \
            exit 1
          fi
      - name: All succeeded
        if: ${{ success() }}
        shell: bash
        run: |
          cd download && \
          file="$(ls | grep -v 'upload.json')"
          name="${file}"
          size="$(echo $(ls -hl | grep -v 'upload.json' | tail -n1 | awk '{print $5}')B)"
          type="$(file --mime-type "${file}" | awk -F : '{sub(/^ /,"",$2);print $2}')"
          digit="$(jq -r -R 'fromjson? | .digit' < upload.json)"
          encrypted="$(jq -r -R 'fromjson? | .encrypted' < upload.json)"
          # proxy_link="${{ secrets.PROXY_URL }}/${digit}/${encrypted}"
          echo "/${digit}/${encrypted}"
          # retry=0
          # flag=false
          # short_link=""
          # until "${flag}" || (( "${retry}" == 1000 )); do
          #   echo "Retry count: ${retry}"
          #   echo "Flag status: ${flag}"
          #   json_payload="$(jq -n --arg url "${proxy_link}" '{url: $url}')"
          #   short_link="$(curl -s -m 18000 --retry 1000 --retry-all-errors -X POST ${{ secrets.SHORTER_API }}/api/v0/shorter -d "${json_payload}")"
          #   if [[ "${short_link}" != "" ]]; then
          #     flag=true
          #   else
          #     ((retry++)) || true
          #     sleep 1
          #   fi
          # done
          # echo "${short_link}" >> short.json
          # key="$(jq -r -R 'fromjson? | .key' < short.json)"
          # echo "/${key}"
          # link="${{ secrets.SHORTER_API }}/${key}"
          link="${{ secrets.PROXY_URL }}/${digit}/${encrypted}"
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -m 18000 \
            --retry 100 \
            --retry-all-errors \
            -d @- <<EOF
          {
            "status": "success",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "title": "${name}",
            "size": "${size}",
            "type": "${type}",
            "link": "${link}",
            "origin_link": ${{ toJSON(github.event.client_payload.link) }}
          }
          EOF
      - name: Download file not found
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status != '' &&
            steps.anonfiles.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -m 18000 \
            --retry 100 \
            --retry-all-errors \
            -d @- <<EOF
          {
            "status": "failure",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! This link has expired."
          }
          EOF
      - name: Download timed out
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == '' &&
            steps.anonfiles.outputs.status == ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -m 18000 \
            --retry 100 \
            --retry-all-errors \
            -d @- <<EOF
          {
            "status": "failure",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "Sorry! Processing time exceeded 5 hours and timed out."
          }
          EOF
      - name: File size exceeded
        if: >-
          ${{
            failure() &&
            steps.link_status.outputs.status == '' &&
            steps.anonfiles.outputs.status != ''
          }}
        shell: bash
        run: |
          curl -s -X POST \
            ${{ secrets.ENDPOINT_URL }} \
            -H "Accept: application/json" \
            -H "Content-type: application/json" \
            -m 18000 \
            --retry 100 \
            --retry-all-errors \
            -d @- <<EOF
          {
            "status": "failure",
            "channel": ${{ toJSON(github.event.client_payload.channel) }},
            "message": ${{ toJSON(github.event.client_payload.message) }},
            "link": ${{ toJSON(github.event.client_payload.link) }},
            "content": "File size exceeded. File size was ${{ steps.anonfiles.outputs.size }}."
          }
          EOF
